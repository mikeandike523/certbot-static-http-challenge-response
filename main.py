import subprocess
import os
import shutil

import click

@click.command()
@click.argument("domain", type=click.STRING,required=True)
@click.option("--altname", help="""
If desired, you can specify a better name for the cert file, and a symlink will be created to the original               
You will be prompted to enter the original path as reported in the certbot interaction
""", type=click.STRING,required=False,default=None, )
def main(domain,altname):
    """
Simplifies the http challenge reponse for LetsEncrypt by leveraging apache2 and /var/www/htmml

Both initiating the domain registration (or renewal) as well as inputting the challenge response data are manual,
but this program greatly simplifies the process by building the certbot commands automatically, and allowing easy
copy-paste of the challenge data, as well as automatic cleanup for security

Usage:

TWO TERMINAL WINDOWS ARE NEEDED

SUDO PRIVELEGES REQUIRED

Terminal 1
__________

`le-http-a2 <DOMAIN>`
select action #1
Be careful to read the prompts carefully and consider each interaction step


Terminal 2
__________

`le-http-a2 <DOMAIN> [--altname==<ALTNAME>]`
select action #2
Be careful to read the prompts carefully and consider each interaction step
If an altname is specified, you will be prompted to enter the original cert path generated by certbot
This is typically reported by the cerbot cli and can be copy-pasted
    """

    if os.getuid() != 0:
        click.echo("Need to run as sudo")
        exit(1)

    input("""Please make sure that apache2 is running on port 80.
          If you have nginx installed, you may need to stop nginx and start apache2
          Press any key to continue...""")

    print("Select an action")

    for index, item in enumerate([
        "Initiate certbot in manual mode (first terminal window)",
        "Initiate manual response to challenge (second terminal window)"
    ]):
        print(f"{index+1}: {item}")

    action = int(input("Enter 1 or 2:"))

    if action == 1:
        subprocess.run(["sudo","certbot","certonly","--manual","-d",domain, "--preferred-challenges","http"])

    if action == 2:
        filename = input("Enter the challenge file name:")
        challenge_string=input("Enter the challenge string:")
        os.makedirs("/var/www/html/.well-known/acme-challenge",exist_ok=True)
        with open(f"/var/www/html/.well-known/acme-challenge/{filename}", "w", encoding="utf-8") as f:
            f.write(challenge_string)
        try:
            subprocess.run(["bash","-c","sudo chown -R www-data:www-data /var/www/html"])
            subprocess.run(["bash","-c","sudo find /var/www/html -type d -exec chmod 755 {}"])
            subprocess.run(["sudo find /var/www/html -type f -exec chmod 644 {}"])
        except Exception as e:
            print(e)
        input("Please go to terminal 1 and start the challenge request, then wait for it to be approved")
        if altname:
            cert_path=("Input the full path to the generated cert")
            cert_folder = os.path.dirname(cert_path)
            link_name=os.path.join(cert_folder,altname)
            if cert_path != link_name:
                subprocess.run(["sudo","ln","-s",cert_path,link_name])
        shutil.rmtree("/var/www/html/.well-known")

if __name__ == "__main__":
    main()